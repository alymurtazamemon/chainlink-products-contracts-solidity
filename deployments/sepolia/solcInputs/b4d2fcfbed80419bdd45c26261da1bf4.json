{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Ethereum Goerli\n     * Aggregator: ETH/USD\n     * Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n     */\n    constructor(address _priceFeedAddress) {\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    /**\n     * Returns the latest price.\n     */\n    function getLatestPrice() public view returns (int, uint80) {\n        // prettier-ignore\n        (\n            uint80 roundID,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return (price, roundID);\n    }\n\n    /**\n     * Returns historical price for a round id.\n     * roundId is NOT incremental. Not all roundIds are valid.\n     * You must know a valid roundId before consuming historical data.\n     *\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\n     */\n    function getHistoricalPrice(uint80 _roundId) public view returns (int256) {\n        // prettier-ignore\n        (\n            /*uint80 roundID*/,\n            int price,\n            /*uint startedAt*/,\n            uint timeStamp,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.getRoundData(_roundId);\n        require(timeStamp > 0, \"Round not complete\");\n        return price;\n    }\n}\n"
    },
    "contracts/ReserveConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract ReserveConsumerV3 {\n    AggregatorV3Interface internal reserveFeed;\n\n    /**\n     * Network: Ethereum Goerli\n     * Aggregator: Stader Labs PoR\n     * Address: 0x3de1bE9407645533CD0CbeCf88dFE5297E7125e6\n     */\n    constructor(address reserveFeedAddress) {\n        reserveFeed = AggregatorV3Interface(reserveFeedAddress);\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getLatestReserve() public view returns (int) {\n        // prettier-ignore\n        (\n            /*uint80 roundID*/,\n            int reserve,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = reserveFeed.latestRoundData();\n\n        return reserve;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}